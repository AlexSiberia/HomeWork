import UIKit
import Foundation


/*
 –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ

 1. –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞ —Å leetcode

 2. –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å Swift Strings

 - https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html
 - https://developer.apple.com/documentation/swift/string
 - https://swift.org/blog/utf8-string/
 - https://learnappmaking.com/swift-string-how-to/
 - https://www.swiftbysundell.com/basics/strings/
 - https://www.mikeash.com/pyblog/friday-qa-2015-11-06-why-is-swifts-string-api-so-hard.html

 3. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ. –í—ã—Ö–æ–¥–Ω–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —á–∏—Å–ª—É –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Å–∏–º–≤–æ–ª–æ–≤
 * –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤—ã–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–≤ –≤ –≤–∏–¥–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–º–≤–æ–ª #

 4. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ–±—â–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ. –ó–∞–º–µ—á–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã split –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –Ω–µ–ª—å–∑—è
 */

/*
 1. –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞ —Å leetcode
 Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.
 
 Example 1:
 Input: arr = [1,0,2,3,0,4,5,0]
 Output: [1,0,0,2,3,0,0,4]
 Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]
 */

func duplicateZeros(_ arr: inout [Int]) {
    var flag = false
    for index in 0...arr.count - 1 {
        if flag == true {
            flag = false
            continue
        }
        if arr[index] == 0 {
            arr.insert(0, at: index)
            arr.removeLast()
            flag = true
        }
    }
}
var arr = [1,0,2,3,0,4,5,0]
duplicateZeros(&arr)

let flag = "üáµüá∑"
let firstCodeUnit = flag.startIndex
let secondCodeUnit = flag.utf8.index(after: firstCodeUnit)

if let exactIndex = secondCodeUnit.samePosition(in: flag) {
    print(flag[exactIndex])
} else {
    print("No exact match for this position.")
}
print(firstCodeUnit)

/*
 3. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ. –í—ã—Ö–æ–¥–Ω–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —á–∏—Å–ª—É –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Å–∏–º–≤–æ–ª–æ–≤
 * –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤—ã–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–≤ –≤ –≤–∏–¥–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–º–≤–æ–ª #
 */

let string = "Hello, world!"
// –†–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–¥—Å–º–æ—Ç—Ä–µ–ª –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
func countLetters(string: String) -> [Character: Int] {
    string.reduce(into: [:]) { counts, letter in
        counts[letter, default: 0] += 1
    }
}

// –¢–∞–∫–æ–π –≤—ã–≤–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è –≤ –∫–æ–Ω—Å–æ–ª—å —Ç–æ–∂–µ –ø–æ–¥—Å–º–æ—Ç—Ä–µ–ª
var dict = countLetters(string: string)
(Array(dict).sorted { $0.1 > $1.1 }).forEach { (k, v) in print("\(k):\(v)") }

// –†–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–¥—É–º–∞–ª —Å–∞–º, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–µ–∫—Ü–∏–π –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞. –û—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å.
func countChar(string: String) -> [Character: Int] {
    var arrayOfChar: [Character] = []
    for char in string {
        arrayOfChar.append(char)
    }
    let originArrayOrChar = Array(Set(arrayOfChar))
    var dictOfArray: [Character: Int] = [:]
    for i in 0...originArrayOrChar.count - 1{
        var count = 0
        for j in 0...arrayOfChar.count - 1 {
            if originArrayOrChar[i] == arrayOfChar[j] {
                count += 1
                dictOfArray.updateValue(count, forKey: originArrayOrChar[i])
            }
        }
    }
    return dictOfArray
}
// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –≤–≤–∏–¥–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Å–¥–µ–ª–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
Array(countChar(string: string).sorted { $0.1 > $1.1 }).forEach { (k, v) in print("\(k):\(String(repeatElement("#", count: v)))") }

/*
 4. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ–±—â–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ. –ó–∞–º–µ—á–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã split –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –Ω–µ–ª—å–∑—è
 */
func countWords(string: String) -> Int {
    let arr = Array(string)
    // –ü–æ—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
    let count = arr.reduce(0, { x, element in
        if element == " "{
            return x + 1
        }
        return x
    })
    print("The sentence consists of \(count + 1) words")
    return count + 1    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–¥–∞ –Ω–∞ –æ–¥–Ω–æ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ–±–µ–ª–æ–≤
}

countWords(string: string)
