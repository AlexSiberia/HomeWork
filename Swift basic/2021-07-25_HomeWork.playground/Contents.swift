import UIKit

/*
 1. –°–æ–∑–¥–∞—Ç—å –¥–≤–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã: –ø–µ—Ä–≤–∞—è - —Ç–≤–æ–µ –∏–º—è, –≤—Ç–æ—Ä–∞—è - –º–æ–µ. –°—Ä–∞–≤–Ω–∏—Ç—å, –∫—Ç–æ –∏–¥–µ—Ç —Ä–∞–Ω—å—à–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É.
 
 2. –°–æ–∑–¥–∞—Ç—å tuple, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ–ª–æ–≤–µ–∫–∞. –°–æ–∑–¥–∞—Ç—å –¥–≤–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —ç—Ç–æ–≥–æ tuple: –ø–µ—Ä–≤–∞—è - —Ç–≤–æ–µ –∏–º—è, –≤—Ç–æ—Ä–∞—è - –º–æ–µ. –°—Ä–∞–≤–Ω–∏—Ç—å 2 tuple.
 https://stackoverflow.com/a/53266743/932239
 https://developer.apple.com/documentation/swift/comparable (–±–ª–æ–∫ Tuple Comparison)
 
 3. –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ?
 
 –ù–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Å—è—Ü–∞ (String, –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ –Ω–∏–∂–Ω–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–µ) –∏ –≥–æ–¥–∞ (Int), –Ω—É–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ. –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≥–æ–¥–∞ –∫—Ä–∞—Ç–µ–Ω 4, —Ç–æ –≥–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º –∏ ¬´—Ñ–µ–≤—Ä–∞–ª—å¬ª –∏–º–µ–µ—Ç 29 –¥–Ω–µ–π. –ò—Å–∫–ª—é—á–µ–Ω–∏—è: –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –≥–æ–¥–∞ –∫—Ä–∞—Ç–µ–Ω 100, –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –≥–æ–¥–∞ –∫—Ä–∞—Ç–µ–Ω 400, –≥–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º üò¨
 
 4. –ó–Ω–∞—è —á–∏—Å–ª–æ, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏, –±–æ–ª—å—à—É—é –∏–ª–∏ —Ä–∞–≤–Ω—É—é —ç—Ç–æ–º—É —á–∏—Å–ª—É.
 
 5. –ó–Ω–∞—è —á–∏—Å–ª–æ, –≤—ã—á–∏—Å–ª–∏—Ç—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≥–ª—É–±–∏–Ω–æ–π, —Ä–∞–≤–Ω–æ–π —ç—Ç–æ–º—É —á–∏—Å–ª—É.
 https://ru.wikipedia.org/wiki/%D0%A2%D1%80%D0%B5%D1%83%D0%B3%D0%BE%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D1%87%D0%B8%D1%81%D0%BB%D0%BE
 
 6. –í—ã—á–∏—Å–ª–∏—Ç—å n-–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –§–∏–±–æ–Ω–∞—á—á–∏.
 https://ru.wikipedia.org/wiki/%D0%A7%D0%B8%D1%81%D0%BB%D0%B0_%D0%A4%D0%B8%D0%B1%D0%BE%D0%BD%D0%B0%D1%87%D1%87%D0%B8
 
 7. –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É, –ø–æ–∫–∞–∑—ã–≤–∞—é—â—É—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 2 –¥–æ 12 –ø—Ä–∏ 2 –±—Ä–æ—Å–∫–∞—Ö —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–∞–ª—å–Ω—ã—Ö –∫–æ—Å—Ç–µ–π.
 */

// 1. –°–æ–∑–¥–∞—Ç—å –¥–≤–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã: –ø–µ—Ä–≤–∞—è - —Ç–≤–æ–µ –∏–º—è, –≤—Ç–æ—Ä–∞—è - –º–æ–µ. –°—Ä–∞–≤–Ω–∏—Ç—å, –∫—Ç–æ –∏–¥–µ—Ç —Ä–∞–Ω—å—à–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É.

let mentorName: String = "Aleksandr Sychev"
let menteeName = "Alexander Kurbatov"
let whichIsTheFirst = mentorName < menteeName ? "The mentor's name is the first in alfabet" : "The mentee's name is the first in alfabet"
print(whichIsTheFirst)
// –° –ø–æ–º–æ—â—å—é —Ç–µ—Ä–Ω–∞—Ä–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ">" –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, —á—Ç–æ –∏–º—è –º–µ–Ω—Ç–æ—Ä–∞ –∏–¥—ë—Ç —Ä–∞–Ω—å—à–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É

/*
 2. –°–æ–∑–¥–∞—Ç—å tuple, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ–ª–æ–≤–µ–∫–∞. –°–æ–∑–¥–∞—Ç—å –¥–≤–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —ç—Ç–æ–≥–æ tuple: –ø–µ—Ä–≤–∞—è - —Ç–≤–æ–µ –∏–º—è, –≤—Ç–æ—Ä–∞—è - –º–æ–µ. –°—Ä–∞–≤–Ω–∏—Ç—å 2 tuple.
 https://stackoverflow.com/a/53266743/932239
 https://developer.apple.com/documentation/swift/comparable (–±–ª–æ–∫ Tuple Comparison)
 */

typealias firstLastName = (firstName: String, lastName: String)
let mentor: firstLastName = (firstName: "Aleksandr", lastName: "Sychev")
let mentee: firstLastName = ("Alexander", "Kurbatov")
let whichFirstLastNameIsTheFirstInAlfabet = mentor < mentee ? "The mentor's name is the first in alfabet" : "The mentee's name is the first in alfabet"
print(whichFirstLastNameIsTheFirstInAlfabet)

/*
 3. –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ?
 
 –ù–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Å—è—Ü–∞ (String, –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ –Ω–∏–∂–Ω–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–µ) –∏ –≥–æ–¥–∞ (Int), –Ω—É–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ. –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≥–æ–¥–∞ –∫—Ä–∞—Ç–µ–Ω 4, —Ç–æ –≥–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º –∏ ¬´—Ñ–µ–≤—Ä–∞–ª—å¬ª –∏–º–µ–µ—Ç 29 –¥–Ω–µ–π. –ò—Å–∫–ª—é—á–µ–Ω–∏—è: –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –≥–æ–¥–∞ –∫—Ä–∞—Ç–µ–Ω 100, –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –≥–æ–¥–∞ –∫—Ä–∞—Ç–µ–Ω 400, –≥–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º üò¨
 */

// –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Å –º–µ—Å—è—Ü–∞–º–∏
enum months {
    case january
    case february
    case march
    case april
    case may
    case june
    case july
    case august
    case september
    case october
    case november
    case december
}

// –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–µ—Å—è—Ü –∏ –≥–æ–¥
func daysInMonth(year: Int, month: months) -> Int {
    var daysInMonth: Int = 0
    switch month {
    case .january, .march, .may, .july, .august, .october, .december:
        daysInMonth = 31
    case .april, .june, .september, .november:
        daysInMonth = 30
    case .february:
        if (year % 400 == 0) {
            daysInMonth = 29
        } else if (year % 100 == 0){
            daysInMonth = 28
        } else if (year % 4 == 0) {
            daysInMonth = 29
        } else {
            daysInMonth = 28
        }
    }
    return daysInMonth
}
daysInMonth(year: 2032, month: .april)
daysInMonth(year: 2100, month: .february)

// –í—Ç–æ—Ä–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
func daysInMonth2(year: Int, month: months) -> Int {
    var daysInMonth: Int = 0
    switch month {
    case .january, .march, .may, .july, .august, .october, .december:
        daysInMonth = 31
    case .april, .june, .september, .november:
        daysInMonth = 30
    case .february where year % 400 == 0:
        daysInMonth = 29
    case.february where year % 100 == 0:
        daysInMonth = 28
    case .february where year % 4 == 0:
        daysInMonth = 29
    case .february:
        daysInMonth = 28
    }
    return daysInMonth
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
daysInMonth2(year: 3189, month: .december) // –º–µ—Å—è—Ü –¥–µ–∫–∞–±—Ä—å
daysInMonth2(year: 3200, month: .april) // –º–µ—Å—è—Ü –∞–ø—Ä–µ–ª—å
daysInMonth2(year: 3200, month: .february) // –º–µ—Å—è—Ü —Ñ–µ–≤—Ä–∞–ª—å –∏ –≥–æ–¥ –∫—Ä–∞—Ç–Ω—ã–π 400 –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π
daysInMonth2(year: 3100, month: .february) // –º–µ—Å—è—Ü —Ñ–µ–≤—Ä–∞–ª—å –∏ –≥–æ–¥ –∫—Ä–∞—Ç–Ω—ã–π 100 –Ω–µ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π
daysInMonth2(year: 3180, month: .february) // –º–µ—Å—è—Ü —Ñ–µ–≤—Ä–∞–ª—å –∏ –≥–æ–¥ –∫—Ä–∞—Ç–Ω—ã–π 4 –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π
daysInMonth2(year: 2021, month: .february) // –º–µ—Å—è–π —Ñ–µ–≤—Ä–∞–ª—å –∏ –≥–æ–¥ –Ω–µ –∫—Ä–∞—Ç–Ω—ã–π 4 –Ω–µ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π

// 4. –ó–Ω–∞—è —á–∏—Å–ª–æ, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏, –±–æ–ª—å—à—É—é –∏–ª–∏ —Ä–∞–≤–Ω—É—é —ç—Ç–æ–º—É —á–∏—Å–ª—É.

// –†–µ—à–µ–Ω–∏–µ –ø–æ–¥–≥–ª—è–¥–µ–ª –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
func findPowerOfTwo(number: Int) -> Int {
    var power: Int = 1
    var twoInPower = 2
    while twoInPower < number {
        twoInPower *= 2
        power += 1
        print(twoInPower) // —ç—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ü–∏–∫–ª–∞
    }
    return power
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
findPowerOfTwo(number: 0) // —Å–ª–µ–¥—É—é—â–∞—è –¥–≤–æ–π–∫–∞ –≤ —Å—Ç–µ–ø–µ–Ω–∏ 1
findPowerOfTwo(number: 2) // —Å–∞–º–∞ –¥–≤–æ–π–∫–∞ –≤ —Å—Ç–µ–ø–µ–Ω–∏ 1
findPowerOfTwo(number: 3) // —Å–∞–º–∞ –¥–≤–æ–π–∫–∞ –≤ —Å—Ç–µ–ø–µ–Ω–∏ 2
findPowerOfTwo(number: 4) // 4 - —ç—Ç–æ –¥–≤–æ–π–∫–∞ –≤ —Å—Ç–µ–ø–µ–Ω–∏ 2
findPowerOfTwo(number: 25) // —Å–ª–µ–¥—É—é—â–∞—è –¥–≤–æ–π–∫–∞ –≤ —Å—Ç–µ–ø–µ–Ω–∏ 5

// 5. –ó–Ω–∞—è —á–∏—Å–ª–æ, –≤—ã—á–∏—Å–ª–∏—Ç—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≥–ª—É–±–∏–Ω–æ–π, —Ä–∞–≤–Ω–æ–π —ç—Ç–æ–º—É —á–∏—Å–ª—É.

// –†–µ—à–µ–Ω–∏–µ –∏–Ω—Ç–∫—É–∏—Ç–∏–≤–Ω–æ-—Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–µ :-)
func findTriangleNumber (number: Int) -> Int {
    var triangleNumber: Int = 0
    var counter = 1
    while counter <= number {
        triangleNumber += counter
        counter += 1
    }
    return triangleNumber
}

findTriangleNumber(number: 7)

// –í—Ç–æ—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –∏–∑ –í–∏–∫–∏

func findTriangleNumber2 (number n: Int) -> Int {
    let triangleNumber: Int = (n * (n + 1)) / 2
    return triangleNumber
}

findTriangleNumber2(number: 1)

// 6. –í—ã—á–∏—Å–ª–∏—Ç—å n-–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –§–∏–±–æ–Ω–∞—á—á–∏.

// Solution with recursion function
func findFibonachi (number: Int) -> Int {
    var fibonachiNumber: Int = 0
    if number == 0 {
        fibonachiNumber = 0
    } else if number == 1 {
        fibonachiNumber = 1
    }
    else {
        fibonachiNumber = ((findFibonachi(number: number - 1)) + findFibonachi(number: number - 2))
    }
    return fibonachiNumber
}
findFibonachi(number: 10)

// Solution with for-loop
func findFibonachi2 (number: Int) -> Int {
    var array: [Int] = []
    for n in 0...number {
        if n == 0 {
            array.append(n)
        } else if n == 1 {
            array.append(n)
        }
        else {
            array.append(array[n - 1] + array[n - 2])
        }
    }
    return array[number]
}
findFibonachi2(number: 10)


// 7. –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É, –ø–æ–∫–∞–∑—ã–≤–∞—é—â—É—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 2 –¥–æ 12 –ø—Ä–∏ 2 –±—Ä–æ—Å–∫–∞—Ö —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–∞–ª—å–Ω—ã—Ö –∫–æ—Å—Ç–µ–π.

func diceRollTable() {
    var combinationArray: [[[Int]]] = []
    let diceRoll1 = [1, 2, 3, 4, 5, 6]
    let diceRoll2 = [1, 2, 3, 4, 5, 6]
    for i in diceRoll1 {
        for j in diceRoll2 {
            if i + j == 2 {
                if combinationArray.count == 0{
                    combinationArray.append([[i, j]])
                } else {
                    combinationArray[0].append([i, j])
                }
            } else if i + j == 3 {
                if  combinationArray.count == 1 {
                    combinationArray.append([[i, j]])
                } else {
                    combinationArray[1].append([i, j])
                }
            } else if i + j == 4 {
                if combinationArray.count == 2 {
                    combinationArray.append([[i, j]])
                } else {
                    combinationArray[2].append([i, j])
                }
            } else if i + j == 5 {
                if combinationArray.count == 3 {
                    combinationArray.append([[i, j]])
                } else {
                    combinationArray[3].append([i, j])
                }
            } else if i + j == 6 {
                if combinationArray.count == 4 {
                    combinationArray.append([[i, j]])
                } else {
                    combinationArray[4].append([i, j])
                }
            } else if i + j == 7 {
                if combinationArray.count == 5 {
                    combinationArray.append([[i, j]])
                } else {
                    combinationArray[5].append([i, j])
                }
            } else if i + j == 8 {
                if combinationArray.count == 6 {
                    combinationArray.append([[i, j]])
                } else {
                    combinationArray[6].append([i, j])
                }
            } else if i + j == 9 {
                if combinationArray.count == 7 {
                    combinationArray.append([[i, j]])
                } else {
                    combinationArray[7].append([i, j])
                }
            } else if i + j == 10 {
                if combinationArray.count == 8 {
                    combinationArray.append([[i, j]])
                } else {
                    combinationArray[8].append([i, j])
                }
            } else if i + j == 11 {
                if combinationArray.count == 9 {
                    combinationArray.append([[i, j]])
                } else {
                    combinationArray[9].append([i, j])
                }
            } else if i + j == 12 {
                if combinationArray.count == 10 {
                    combinationArray.append([[i, j]])
                } else {
                    combinationArray[10].append([i, j])
                }
            }
        }
    }
    print(combinationArray[0])
    print(combinationArray[1])
    print(combinationArray[2])
    print(combinationArray[3])
    print(combinationArray[4])
    print(combinationArray[5])
    print(combinationArray[6])
    print(combinationArray[7])
    print(combinationArray[8])
    print(combinationArray[9])
    print(combinationArray[10])
}
diceRollTable()

